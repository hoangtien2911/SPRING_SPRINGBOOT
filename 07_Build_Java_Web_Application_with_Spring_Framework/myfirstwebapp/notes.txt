##JSP
/src/main/resources/META-INF/resources/WEB-INF/jsp/sayHello.jsp	
/say-hello-jsp => SayHelloController - sayHelloJsp method => sayHello

<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
</dependency>

=>  spring.mvc.view.prefix=/WEB-INF/jsp/
	spring.mvc.view.suffix=.jsp
	prefix and suffix will be added to your view name form method you return
=> /WEB-INF/jsp/sayHello.jsp

##Login JSP
/login => com.hoangtien.springboot.myfirstwebapp.login.LoginController => login.jsp

//you would want anything to be available to your JSP, you can add it to the model
//Model call ModelMap

//logger
private Logger  logger = LoggerFactory.getLogger(getClass());
logger.debug("Request param is {}", name);
logger.info("Printed at info level {}", name);

##localhost:8080/login
B1: Identifies correct Controller method
/login => LoginController.gotoLoginPage
B2: Executes Controller method
=> Puts data into model
=>Returns view name => Login
B3: Identifies correct View
/WEB-INF/jsp/login.jsp
B4: Execute view


## To do
id 
username
description
targetDate
done

Todo
TodoService
TodoController
listTodos.jsp

## Request Model Session

@SessionAttributes("name")

##JSTL
<dependency>
	<groupId>jakarta.servlet.jsp.jstl</groupId>
	<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
</dependency>

<dependency>
	<groupId>org.eclipse.jetty</groupId>
	<artifactId>glassfish-jstl</artifactId>
</dependency>

##Boostrap
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap</artifactId>
	<version>5.1.3</version>
</dependency>

<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>jquery</artifactId>
	<version>3.6.0</version>
</dependency>
		
in Statics folder


## Redirect (redirect:....)
method RequestMapping 
@RequestMapping(value = "add-todo", method = RequestMethod.POST)
return "redirect:list-todos";

##Validation
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-validation</artifactId>
</dependency>

##Command Bean don't need to use @RequestParam 026 step 22 folder 07
spring form tag library documentation
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

<form method="post">
				Description: <input type="text" name="description"/>
				<input type="submit" class="btn btn-success"/>
			
			</form>

			<form:form method="post" modelAttribute="todo">
				Description: <form:input type="text" path="description" 
								required="required"/>
				<form:input type="hidden" path="id"/>
				<form:input type="hidden" path="done"/>
			</form:form>


validation in todo.java 
@Size(min = 10, message = "Enter atlleast 10 character")

add @valid BindingResult

@RequestMapping(value = "add-todo", method = RequestMethod.POST)
	public String addNewTodoPage(ModelMap model,@Valid Todo todo, BindingResult result) {
		if (result.hasErrors()) {
			return "todo";
		}
		todoService.addTodo((String)model.get("name"), todo.getDescription(), LocalDate.now().plusYears(1), false);
		return "redirect:list-todos";
	}


in form 
<form:errors path="description" cssClass="text-warning"/>


##DELETE use predicate lamda

public void deleteById(int id) {
		// todo.getId() == id
		// todo -> todo.getId() == id (Lamda function)
		Predicate<? super Todo> predicate = todo -> todo.getId() == id;
		todos.removeIf(predicate);
	}

#FORMATDATE in application.properties
spring.mvc.format.date=yyyy-MM-dd

<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap-datepicker</artifactId>
	<version>1.9.0</version>
</dependency>

<fieldset class="mb-3">				
	<form:label path="targetDate">Target Date</form:label>
	<form:input type="text" path="targetDate" required="required"/>
	<form:errors path="targetDate" cssClass="text-warning"/>
</fieldset>


<link href="webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css" rel="stylesheet" >

<script src="webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
<script type="text/javascript">
	$('#targetDate').datepicker({
	    format: 'yyyy-mm-dd'
	});
</script>


###SPRING SECURETY

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>

class SpringSecurityConfiguration

####
By default data.sql executed before the entities are processed so we need make a change
spring.jpa.defer-datasource-initialization=true


docker run --detach
 --env MYSQL_ROOT_PASSWORD=dummypassword 
 --env MYSQL_USER=todos-user 
 --env MYSQL_PASSWORD=dummytodos 
 --env MYSQL_DATABASE=todos 
 --name mysql 
 --publish 3306:3306 mysql:8-oracle














